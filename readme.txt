
===================================================================================================

Assets
  │
  │
  └──Scenes
	│
	├──Refactoring(リファクタリングの授業で使う物が入っている。)
  	│	
  	├──UnityGames(ここにゲーム制作の授業で作った課題を)
  	│　 ├──Coinpusher
	│　 ├──WhackAMole
	│　 ├──???
	│　 │　　
	│　 └──???
	│
  	└──Photon(ネットワーク)
	

上記のようなフォルダ階層になっております。
===================================================================================================


以下はゲーム制作の欄


-----------------------------------コイン落とし----------------------------------------------------

Playerのコインの所持数をReactiveProperty<int>にしておくことで、スムーズにUIの表示を行えることが出来た。

コインを押す台は、Sinは使わずDotweenを使って書いたので、直感的にどこからどこまで動くのか？を直感的に操作が出来るので、短い開発時間の中を上手く動作することが可能に。

コインが0枚以下になったら...という所もちゃんとできているので、-1...-2...などとなって行かないように調整済み。

全てのオブジェクトをProBuilderで作りました。

-----------------------------------モグラたたき----------------------------------------------------

UniRXを使って連打防止がちゃんとされている事。

エフェクトが付いているので(プッシュはされていないけど)見た目が短い時間でもリッチになるように。

時間によってモグラの量を調整する方法を「サブスクライブした値をswitchで判断し、条件に当たる値をそのまま使用する」と言う方法で実装することで、後々の時間による難易度調整がスムーズに行くように設計。

正直WhackAMoleValueManagerはSingletonとかにした方が良かったかも...。

3*3でも4*4でも5*5でも [ContextMenu("タイルを取得")]で取得するので、タイルがどれだけ離れていても、どれだけあっても取得できるように。

-----------------------------------ターンバトル----------------------------------------------------

UniRXを使用、MV(R)PパターンとしてUI周りを設計しました、

[Player]と[Enemy]を【Character】クラスの子クラスとしたことで、ロジックの共通部分などをまとめる事が可能になりました。

なのでパラメーターを変更などをすれば他のキャラクターを作れる拡張性の高いキャラクターの制作を目指しました。

あとUI部分はCanvasGroupでまとめたので変更などもやり易くなりました。


-----------------------------------カードゲーム----------------------------------------------------

ソートの機能を実装するときに、自分のソートオプションEnumをUniRXでSubScribeして、

sortOption.Subscribe(_ =>
{
    cardsTrans = GetSortAction();
}
List<Transform> GetSortAction()
{
    return _sortOption.Value switch
    {
        CardSortOption.Cost => _cardsHandlerList.OrderBy(card => card.CardData.cost).Select(kv => kv.transform).ToList(),

        CardSortOption.HP => _cardsHandlerList.OrderBy(card => card.CardData.hp).Select(kv => kv.transform).ToList(),

        CardSortOption.Count => _cardsHandlerList.OrderBy(card => card.CardData.cardsCount).Select(kv => kv.transform).ToList(),

        _ => _cardsHandlerList.OrderBy(card => card.CardData.cost).Select(kv => kv.transform).ToList(),
    };
}

と個人的に好みであるswitchの書き方 × LinQを使用したソート方法で分かりやすいコーディングができたかなと思っています、

GridLayoutGroupで位置を設定しているため、1フレーム待たなきゃいけないなどのちょっと苦戦した部分がありましたが今回はすんなりと完成出来ました。


-----------------------------------？？？？？？----------------------------------------------------


-----------------------------------？？？？？？----------------------------------------------------


-----------------------------------？？？？？？----------------------------------------------------
